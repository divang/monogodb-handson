Why Stitch?
You may ask why we’d use Stitch for something like this, considering that we could easily just write 
an application that talks directly to MongoDB instead. The answer is user management and security: 
even in this simple case, Stitch user management ensures that no user can update or delete comments 
that don’t belong to them. Stitch handles both the authentication (login) and authorization (permissions) 
aspects of user management, and all we have to do is enable anonymous authentication and declare 
a single access rule. All of the other aspects of user management, SSO, and the boilerplate code normally 
associated with users is abstracted away and taken care of for us by Stitch. Stitch’s serverless architecture 
abstracts away servers, routing, and load balancing as well, so we can focus on the content of our blog, 
rather than the details of how’s it’s being served to an end user.

Steps:
1- Setup the Cloud based MongoDB Service via Atlas
>https://docs.atlas.mongodb.com/getting-started/

2- Login to Atlas, go to left panel, click on Stitch
>https://stitch.mongodb.com/

3- Create New Application. Give the application a name (e.g. BlogTutorial) and click Create. 
Wait for your application to initialize. Upon creation of your app, you will be redirected to the Stitch UI.

4- Turn on Anonymous Authentication

5- Configure the blog.comments MongoDB Collection

6- Click Add Collection. Enter blog for the Database Name. Enter comments for the Collection Name. Click Add Collection. 
Click Rules under MongoDB Atlas in the left-hand navigation of the Stitch UI.

7- Deploy Your Application. Click Review & Deploy Changes in the banner at the top of the Stitch UI and then click Deploy.

8- Create a Web Client: Create a html page: blog.html

HTML Code:
 <html>
  <head>
  </head>
  <body>
    <h3>This is a stitch blog post</h3>
    <div id="content">
      MonogDB tutorial Content, please give your suggestion!!!
    </div>
    <hr>
    <div id="comments"></div>
  </body>
</html>

9- Include the MongoDB Stitch JavaScript SDK

JavaScript Code:
<script src="https://s3.amazonaws.com/stitch-sdks/js/bundles/4/stitch.js"></script>

10- Apps communicate with Stitch by calling methods on client objects from the Stitch SDK. We need to initialize an app client and a MongoDB Service client to store comments in MongoDB.

JavaScript Code:
<script>
  // Initialize the App Client
  const client = stitch.Stitch.initializeDefaultAppClient("<your-app-id>");
  // Get a MongoDB Service Client
  const mongodb = client.getServiceClient(
    stitch.RemoteMongoClient.factory,
    "mongodb-atlas"
  );
  // Get a reference to the blog database
  const db = mongodb.db("blog");
</script>

11- Query and Display Comments on Page Load:

JavaScript Code (paste inside <script> tag):
function displayComments() {
  db.collection("comments")
    .find({}, {limit: 1000})
    .toArray()
    .then(docs => {
      const html = docs.map(doc => `<div>${doc.comment}</div>`);
      document.getElementById("comments").innerHTML = html;
    });
}

12- Log In and Display Comments On Load:

JavaScript Code (paste inside <script> tag):
function displayCommentsOnLoad() {
  client.auth
    .loginWithCredential(new stitch.AnonymousCredential())
    .then(displayComments)
    .catch(console.error);
}

13- On HTML body load, modify body tag:
HTML Code:
<body onload="displayCommentsOnLoad()">

14- Add a Form for Submitting Comments:

JavaScript Code (paste inside <script> tag):
function addComment() {
  const newComment = document.getElementById("new_comment");
  console.log("add comment", client.auth.user.id)
  db.collection("comments")
    .insertOne({ owner_id : client.auth.user.id, comment: newComment.value })
    .then(displayComments);
  newComment.value = "";
}

15- Submit Comment to blog MongoDB service:
<hr>
Add comment:
<input id="new_comment"><input type="submit" onClick="addComment()">
