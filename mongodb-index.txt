Indexes: 
1- Support the efficient execution of queries in MongoDB. 
Without indexes, MongoDB must perform a collection scan, 
i.e. scan every document in a collection, to select those documents 
that match the query statement. If an appropriate index exists for a query, 
MongoDB can use the index to limit the number of documents it must inspect.

2- Fundamentally, indexes in MongoDB are similar to indexes in other database systems. 
MongoDB defines indexes at the collection level and supports indexes on any field or 
sub-field of the documents in a MongoDB collection.

3- MongoDB indexes use a B-tree data structure.

4- Default _id Index
MongoDB creates a unique index on the _id field during the creation of a collection. 
The _id index prevents clients from inserting two documents with the same value for the _id field. 
You cannot drop this index on the _id field.

5- Create an Index
db.collection.createIndex( <key and index type specification>, <options> )
> db.products.createIndex(
  { item: 1, quantity: -1 } ,
  { name: "query for inventory" }
)

* 1 indicates ascending order and -1 specifies the descending order.
* Unique Index on a Single Field
> db.collection.createIndex( { "a.loc": 1, "a.qty": 1 }, { unique: true } )

6- Index Types
i- Single Field Create
>db.records.createIndex( { a: 1 } )
Ascending
>db.records.find().sort( { a: 1 } )
Descending
>db.records.find().sort( { a: -1 } )

ii- Compound Index
db.collection.createIndex( { <field1>: <type>, <field2>: <type2>, ... } )
>db.products.createIndex( { "item": 1, "stock": 1 } )

iii- Multikey Index: 
MongoDB uses multikey indexes to index the content stored in arrays. 
If you index a field that holds an array value, 
db.coll.createIndex( { <field>: < 1 or -1 > } )
>db.collection.insert( { _id: 2, a: [ { loc: "A" }, { qty: 5 } ] } )
>db.collection.insert( { _id: 3, a: [ { loc: "A", qty: 10 } ] } )
>db.collection.createIndex( { "a.loc": 1, "a.qty": 1 }, { unique: true } )

iv- Text Index:
MongoDB provides text indexes to support text search queries on string content. 
text indexes can include any field whose value is a string or an array of string elements.
>db.reviews.createIndex( { comments: "text" } )
>db.reviews.createIndex(
   {
     subject: "text",
     comments: "text"
   }
 )
 
v- Hashed Indexes
Hashed sharding uses a hashed index to partition data across your shared cluster. Hashed indexes compute the hash value of a single field as the index value; this value is used as your shard key
> db.collection.createIndex( { _id: "hashed" } )

*Shard the Collection
Use the sh.shardCollection() method, specifying the full namespace of the collection and the target hashed index to use as the shard key.
sh.shardCollection( "database.collection", { <field> : "hashed" } )





