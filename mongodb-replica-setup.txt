Set Up a Replica Set
1- Shutdown already running MongoDB server.

2- Command to start the MongoDB server by specifying -- replSet option
mongod --port "PORT" --dbpath "YOUR_DB_DATA_PATH" --replSet "REPLICA_SET_INSTANCE_NAME"

3- Create DB data path
> mkdir -p /srv/mongodb/rs0-0  /srv/mongodb/rs0-1 /srv/mongodb/rs0-2

4- First member
> mongod --replSet rs0 --port 27017 --bind_ip localhost --dbpath /srv/mongodb/rs0-0  --oplogSize 128

4- Second member
> mongod --replSet rs0 --port 27018 --bind_ip localhost --dbpath /srv/mongodb/rs0-1 --oplogSize 128

4- Third member
> mongod --replSet rs0 --port 27019 --bind_ip localhost --dbpath /srv/mongodb/rs0-2  --oplogSize 128


5- In Mongo client, issue the command below cmd to initiate a new replica set.
> rs.initiate() 

output> 
{
	"info2" : "no configuration specified. Using a default configuration for the set",
	"me" : "localhost:27017",
	"ok" : 1,
	"$clusterTime" : {
		"clusterTime" : Timestamp(1582894510, 1),
		"signature" : {
			"hash" : BinData(0,"AAAAAAAAAAAAAAAAAAAAAAAAAAA="),
			"keyId" : NumberLong(0)
		}
	},
	"operationTime" : Timestamp(1582894510, 1)
}

6- To check the replica set configuration, issue the command 
> rs.conf()

output>
{
	"_id" : "rs0",
	"version" : 1,
	"protocolVersion" : NumberLong(1),
	"writeConcernMajorityJournalDefault" : true,
	"members" : [
		{
			"_id" : 0,
			"host" : "localhost:27017",
			"arbiterOnly" : false,
			"buildIndexes" : true,
			"hidden" : false,
			"priority" : 1,
			"tags" : {

			},
			"slaveDelay" : NumberLong(0),
			"votes" : 1
		}
	],
	"settings" : {
		"chainingAllowed" : true,
		"heartbeatIntervalMillis" : 2000,
		"heartbeatTimeoutSecs" : 10,
		"electionTimeoutMillis" : 10000,
		"catchUpTimeoutMillis" : -1,
		"catchUpTakeoverDelayMillis" : 30000,
		"getLastErrorModes" : {

		},
		"getLastErrorDefaults" : {
			"w" : 1,
			"wtimeout" : 0
		},
		"replicaSetId" : ObjectId("5e590dae74cc8536c9044c35")
	}
}

7- Ensure that the replica set has a primary 
> rs.status()

output>
{
	"set" : "rs0",
	"date" : ISODate("2020-02-28T12:59:28.446Z"),
	"myState" : 1,
	"term" : NumberLong(1),
	"syncingTo" : "",
	"syncSourceHost" : "",
	"syncSourceId" : -1,
	"heartbeatIntervalMillis" : NumberLong(2000),
	"majorityVoteCount" : 1,
	"writeMajorityCount" : 1,
	"optimes" : {
		"lastCommittedOpTime" : {
			"ts" : Timestamp(1582894761, 1),
			"t" : NumberLong(1)
		},
		"lastCommittedWallTime" : ISODate("2020-02-28T12:59:21.589Z"),
		"readConcernMajorityOpTime" : {
			"ts" : Timestamp(1582894761, 1),
			"t" : NumberLong(1)
		},
		"readConcernMajorityWallTime" : ISODate("2020-02-28T12:59:21.589Z"),
		"appliedOpTime" : {
			"ts" : Timestamp(1582894761, 1),
			"t" : NumberLong(1)
		},
		"durableOpTime" : {
			"ts" : Timestamp(1582894761, 1),
			"t" : NumberLong(1)
		},
		"lastAppliedWallTime" : ISODate("2020-02-28T12:59:21.589Z"),
		"lastDurableWallTime" : ISODate("2020-02-28T12:59:21.589Z")
	},
	"lastStableRecoveryTimestamp" : Timestamp(1582894751, 1),
	"lastStableCheckpointTimestamp" : Timestamp(1582894751, 1),
	"electionCandidateMetrics" : {
		"lastElectionReason" : "electionTimeout",
		"lastElectionDate" : ISODate("2020-02-28T12:55:10.494Z"),
		"electionTerm" : NumberLong(1),
		"lastCommittedOpTimeAtElection" : {
			"ts" : Timestamp(0, 0),
			"t" : NumberLong(-1)
		},
		"lastSeenOpTimeAtElection" : {
			"ts" : Timestamp(1582894510, 1),
			"t" : NumberLong(-1)
		},
		"numVotesNeeded" : 1,
		"priorityAtElection" : 1,
		"electionTimeoutMillis" : NumberLong(10000),
		"newTermStartDate" : ISODate("2020-02-28T12:55:11.528Z"),
		"wMajorityWriteAvailabilityDate" : ISODate("2020-02-28T12:55:11.566Z")
	},
	"members" : [
		{
			"_id" : 0,
			"name" : "localhost:27017",
			"health" : 1,
			"state" : 1,
			"stateStr" : "PRIMARY",
			"uptime" : 272,
			"optime" : {
				"ts" : Timestamp(1582894761, 1),
				"t" : NumberLong(1)
			},
			"optimeDate" : ISODate("2020-02-28T12:59:21Z"),
			"syncingTo" : "",
			"syncSourceHost" : "",
			"syncSourceId" : -1,
			"infoMessage" : "",
			"electionTime" : Timestamp(1582894510, 2),
			"electionDate" : ISODate("2020-02-28T12:55:10Z"),
			"configVersion" : 1,
			"self" : true,
			"lastHeartbeatMessage" : ""
		}
	],
	"ok" : 1,
	"$clusterTime" : {
		"clusterTime" : Timestamp(1582894761, 1),
		"signature" : {
			"hash" : BinData(0,"AAAAAAAAAAAAAAAAAAAAAAAAAAA="),
			"keyId" : NumberLong(0)
		}
	},
	"operationTime" : Timestamp(1582894761, 1)
}

8- Add Members to Replica Set
> rs.add("localhost:27018")
> rs.add("localhost:27019")

output>
2020-02-28T19:59:18.733+0530 I  REPL     [replexec-2] Member localhost:27018 is now in state STARTUP
2020-02-28T20:01:01.535+0530 I  REPL     [replexec-2] Member localhost:27019 is now in state STARTUP

9- Check replica set status again
> rs.status()

10- Now, try to stop Primary replica and try to check the new Primary Election:
> stop mongod which is running on port: 27017 [or primary node]

output of other node> 
2020-02-28T20:08:12.703+0530 I  ELECTION [conn2] Starting an election due to step up request
2020-02-28T20:08:12.703+0530 I  ELECTION [conn2] skipping dry run and running for election in term 2
2020-02-28T20:08:12.710+0530 I  REPL     [replexec-1] Scheduling remote command request for vote request: RemoteCommand 985 -- target:localhost:27017 db:admin cmd:{ replSetRequestVotes: 1, setName: "rs1", dryRun: false, term: 2, candidateIndex: 1, configVersion: 3, lastCommittedOp: { ts: Timestamp(1582900685, 1), t: 1 } }
2020-02-28T20:08:12.710+0530 I  REPL     [replexec-1] Scheduling remote command request for vote request: RemoteCommand 986 -- target:localhost:27019 db:admin cmd:{ replSetRequestVotes: 1, setName: "rs1", dryRun: false, term: 2, candidateIndex: 1, configVersion: 3, lastCommittedOp: { ts: Timestamp(1582900685, 1), t: 1 } }
2020-02-28T20:08:12.710+0530 I  ELECTION [replexec-2] VoteRequester(term 2) received an invalid response from localhost:27017: ShutdownInProgress: In the process of shutting down; response message: { operationTime: Timestamp(1582900685, 1), ok: 0.0, errmsg: "In the process of shutting down", code: 91, codeName: "ShutdownInProgress", $clusterTime: { clusterTime: Timestamp(1582900685, 1), signature: { hash: BinData(0, 0000000000000000000000000000000000000000), keyId: 0 } } }
2020-02-28T20:08:12.716+0530 I  ELECTION [replexec-1] VoteRequester(term 2) received a yes vote from localhost:27019; response message: { term: 2, voteGranted: true, reason: "", ok: 1.0, $clusterTime: { clusterTime: Timestamp(1582900685, 1), signature: { hash: BinData(0, 0000000000000000000000000000000000000000), keyId: 0 } }, operationTime: Timestamp(1582900685, 1) }
2020-02-28T20:08:12.716+0530 I  ELECTION [replexec-1] election succeeded, assuming primary role in term 2
2020-02-28T20:08:12.716+0530 I  REPL     [replexec-1] transition to PRIMARY from SECONDARY

11- To validate replication. Run two Mongo clients, one should connect to Master and other one should connect to Secondary. 

12- In Master Mongo client: 
>db.inventory.insertMany([
   { item: "journal", qty: 25, status: "A", size: { h: 14, w: 21, uom: "cm" }, tags: [ "blank", "red" ] },
   { item: "notebook", qty: 50, status: "A", size: { h: 8.5, w: 11, uom: "in" }, tags: [ "red", "blank" ] },
   { item: "paper", qty: 10, status: "D", size: { h: 8.5, w: 11, uom: "in" }, tags: [ "red", "blank", "plain" ] },
   { item: "planner", qty: 0, status: "D", size: { h: 22.85, w: 30, uom: "cm" }, tags: [ "blank", "red" ] },
   { item: "postcard", qty: 45, status: "A", size: { h: 10, w: 15.25, uom: "cm" }, tags: [ "blue" ] }
]);

13- In Secondary Mongo client: 
> rs.slaveOk()
> db.inventory.find({})

